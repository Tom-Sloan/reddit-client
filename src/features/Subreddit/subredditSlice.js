import { createAsyncThunk, createSlice, current } from "@reduxjs/toolkit";

export const loadSubredditData = createAsyncThunk(
  "subredditSlice/loadSubredditData",
  async (
    {
      subreddit='EarthPorn',
      search = false,
      limit = 100,
      timeframe = "month",
      listing = "top",
    },
    thunkAPI
  ) => {
    try {
      let response;
      if (subreddit === "search" && search) {
        const searchQuery = search.replace(" ", "%20");
        response = await fetch(
          `https://www.reddit.com/search.json?q=${searchQuery}&limit=${limit}&t=${timeframe}`
        );
      } else {
        response = await fetch(
          `https://www.reddit.com/r/${subreddit}/${listing}.json?limit=${limit}&t=${timeframe}`
        );
      }

      const json = await response.json();
      return {
        information: {
          subreddit: subreddit,
          limit: limit,
          timeframe: timeframe,
          listing: listing,
        },
        json: json,
      };
    } catch (e) {
      console.log(e);
    }
  }
);

export const subredditSlice = createSlice({
  name: "subreddit",
  initialState: {
    subjson: {
      favoriteSubreddits: [
        "EarthPorn",
        "cremposting",
        "annoucements",
        "funny",
        "AskReddit",
        "gaming",
        "aww",
        "Music",
        "pics",
        "science",
        "worldnews",
        "videos",
        "todayilearned",
        "movies",
        "news",
        "popular",
        "gifs",
        "explainlikeimfive",
        "mildlyinteresting",
        "nottheonion",
        "space",
        "gadgets",
      ],
      currentSubredditName: "EarthPorn",
      posts: [],
      postDisplayLimit: 25,
    },
    errorLoading: false,
    isLoading: false,
  },
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateSubreddit: (state, action) => {
      state.subjson = {
        ...state.subjson,
        currentSubredditName: action.payload.subreddit,
        posts: action.payload.json.data.children.map(
          (child) => `https://www.reddit.com${child.data.permalink}.json`
        ),
      };
    },
    updatePostDisplayLimit: (state, action) => {
      state.subjson = {
        ...state.subjson,
        postDisplayLimit: action.payload,
      };
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [loadSubredditData.pending]: (state) => {
      console.log("subreddit pending: ");
      // console.log(current(state));

      state.isLoading = true;
      state.errorLoading = false;
    },
    [loadSubredditData.rejected]: (state) => {
      console.log("subreddit rejected: ");
      // console.log(current(state));
      state.isLoading = false;
      state.errorLoading = true;
    },
    [loadSubredditData.fulfilled]: (state, action) => {
      console.log("Subreddit accepted: ");
      // console.log(current(state));
      // console.log(action)

      subredditSlice.caseReducers.updateSubreddit(state, action);

      state.isLoading = false;
      state.errorLoading = false;
    },
  },
});

export const selectSubJsonPosts = (state) => state.subreddit.subjson.posts;
export const selectFavoriteSubreddits = (state) =>
  state.subreddit.subjson.favoriteSubreddits;
export const selectCurrentSubredditName = (state) =>
  state.subreddit.subjson.currentSubredditName;

export const selectPostDisplayLimit = (state) =>
  state.subreddit.subjson.postDisplayLimit;
export const isLoadingSubreddit = (state) => state.subreddit.isLoading;
export const failedToLoadSubreddit = (state) => state.subreddit.errorLoading;
export const { updateSubreddit, updatePostDisplayLimit } =
  subredditSlice.actions;

export default subredditSlice.reducer;
