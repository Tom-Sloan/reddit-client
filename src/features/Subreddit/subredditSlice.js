import { createAsyncThunk, createSlice, current } from '@reduxjs/toolkit';
import {useDispatch} from 'react-redux'
import {loadPosts} from '../Posts/postSlice'

export const loadSubredditData = createAsyncThunk(
    'subredditSlice/loadSubredditData',
    async (subreddit) => {
        try{
            const response = await fetch(`https://www.reddit.com/r/${subreddit}/.json`);
            const json = await response.json();
            console.log("Here");
            console.log(json);
            return json;
        }catch(e){
            console.log(e)
        }
    }
        
);


export const subredditSlice = createSlice({
    name: 'subreddit',
    initialState: {
        subjson: {
            favoriteSubreddits: ['cremposting', 'annoucements','funny',  'AskReddit',  'gaming',  'aww',  'Music',  'pics',  'science',  'worldnews',  'videos',  'todayilearned',  'movies',  'news',  'EarthPorn', 'gifs', 'explainlikeimfive', 'mildlyinteresting', 'nottheonion', 'space', 'gadgets'],
            current_subreddit_name:'cremposting',
            posts: []
        },
        errorLoading: false,
        isLoading: false,
    },
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        updateSubreddit: (state, action) => {
            // console.log('updateSubreddit: ')
            // console.log(action)
            state.subjson = {
                ...state.subjson,
                current_subreddit_name: action.payload.data.children[0].data.subreddit,
                posts: action.payload.data.children.map(child => `https://www.reddit.com${child.data.permalink}.json`)
            }
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: {
        [loadSubredditData.pending] : (state) => {
            console.log('subreddit pending: ');
            // console.log(current(state));
            
            state.isLoading=true;
            state.errorLoading=false;
        },
        [loadSubredditData.rejected] : (state) => {
            console.log('subreddit rejected: ');
            // console.log(current(state));
            state.isLoading=false;
            state.errorLoading=true;
        },
        [loadSubredditData.fulfilled] : (state, action) => {
            console.log('Subreddit accepted: ');
            // console.log(current(state));
            // console.log(action)
            
            subredditSlice.caseReducers.updateSubreddit(state, action);
            
            state.isLoading=false;
            state.errorLoading=false;
        }
    },
  });
  
export const selectSubJsonPosts = (state) => state.subreddit.subjson.posts;
export const selectFavoriteSubreddits = (state) => state.subreddit.subjson.favoriteSubreddits;
export const isLoadingSubreddit = (state) => state.subreddit.isLoading;
export const failedToLoadSubreddit = (state) => state.subreddit.errorLoading;
export const {updateSubreddit} = subredditSlice.actions


export default subredditSlice.reducer;