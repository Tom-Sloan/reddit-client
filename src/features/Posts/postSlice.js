import { createAsyncThunk, createSlice, current } from '@reduxjs/toolkit';
import {updateComments} from '../Comments/commentsSlice'

export const loadPosts = createAsyncThunk(
    'postSlice/loadPosts',
    async ({payload, subredditName}, thunkAPI) => {
        const postData = {};
        const commentData = [];
        let jsons;

        if(!isAlreadyLoaded(thunkAPI.getState())){            
            const responses = await Promise.all(payload.map(url => fetch(url)))
            jsons = await Promise.all(responses.map(response => response.json()))
            
            jsons.forEach(elm => {
                postData[elm[0].data.children[0].data.id] = {
                    id: elm[0].data.children[0].data.id,
                    title: elm[0].data.children[0].data.title,
                    ups: elm[0].data.children[0].data.ups,
                    author: elm[0].data.children[0].data.author,
                    img: elm[0].data.children[0].data.url,
                    is_video: elm[0].data.children[0].data.is_video,
                    thumbnail: elm[0].data.children[0].data.thumbnail,
                    media: elm[0].data.children[0].data.media,
                    is_media: elm[0].data.children[0].data.is_reddit_media_domain,
                }
                //to get children make this a recursive function
                commentData[elm[0].data.children[0].data.id] = elm[1].data.children.map(commentChunks => commentChunks.data.body)
            });
            thunkAPI.dispatch(updatePosts({subredditName:subredditName, data:postData}))
            thunkAPI.dispatch(updateComments({subredditName:subredditName, data:commentData}))
            console.log(postData)
        }
        
        return {subredditName:subredditName, jsons:jsons};
        
    }
);

export const postsSlice = createSlice({
    name: 'posts',
    initialState: {
        allPostData: {
            
        },
        commentsToDisplay: 2,
        errorLoading: false,
        isLoading: false,
    },
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        updatePosts: (state, action) => {
            console.log(action)
            const obj = action.payload.data;
            if (obj && Object.keys(obj).length !== 0 && obj.constructor === Object){
                state.allPostData = {
                ...state.allPostData,
                [action.payload.subredditName]: obj
            }
            console.log(state)
            }
            
        },
        setErrorLoading: (state, action) => {
            state = {
                ...state,
                errorLoading: action.payload
            }
        },
        setIsLoading: (state, action) => {
            state = {
                ...state,
                isLoading: action.payload
            }
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: {
      
        [loadPosts.pending] : (state) => {
            console.log('post pending: ');
            state.isLoading=true;
            state.errorLoading=false;
        },
        [loadPosts.rejected] : (state, action) => {
            console.log('posts rejected: ');
            // console.log(current(state));
            // console.log(action)

            state.isLoading=false;
            state.errorLoading=true;
        },
        [loadPosts.fulfilled] : (state, action) => {
            
            console.log('posts accepted: ');
            // console.log(current(state));
            // console.log(action)  
            
            //No point changing the screen till the values have loaded into comments and posts
            state.isLoading=false;
            state.errorLoading=false;
        }
    },
});

export const selectPostsData = (state) => state.posts.allPostData;
export const isLoadingPosts = (state) => state.posts.isLoading;
export const failedToLoadPosts = (state) => state.posts.errorLoading;
export const isAlreadyLoaded = (state) => Object.keys(state.posts.allPostData).includes(state.subreddit.subjson.currentSubredditName);
export const selectAllPosts = (state) => state.posts.allPostData;
export const selectState = (state) => state;
export const selectCommentsToDisplay = (state) => state.posts.commentsToDisplay;

export const {updatePosts, setErrorLoading, setIsLoading} = postsSlice.actions;

export default postsSlice.reducer;